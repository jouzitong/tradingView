#!/bin/bash

# 开启代理
#source /etc/profile.d/clash.sh
#proxy_on;
## 启动程序
#nohup /usr/local/jdk-21.0.1/bin/java  --enable-preview  -jar -Dspring.profiles.active=prod app-0.0.1-SNAPSHOT.jar 1>app.log &

######################################################################
# 本脚本适用于使用spring-boot-maven-plugin打包的项目, 并且目录遵循以下结构,
# 其中wcs-boot.jar名称可以改变, 但默认在项目目录下只能有一个.
# bin/
# config/
# celib/
# lib/
# wcs-boot.jar
#
######################################################################

APP_NAME="okx-market"
# 如果项目目录只有一个jar, 不需要填写. 如果有值则直接使用. 注意: 只写文件名, 不要带路径.
BOOT_JAR=""

# discover BASE_DIR
BIN_FILE=$(readlink -f ${0})
cd $(dirname "${BIN_FILE}")
BIN_DIR=$(pwd)
BASE_DIR=$(cd ..;pwd)
# echo "BASE_DIR: ${BASE_DIR}"

# 其他方式
#BASE_DIR=`dirname "$0"`/..
#BASE_DIR=`(cd "$BASE_DIR"; pwd)`
#ls -l "$0" | grep -e '->' > /dev/null 2>&1
#if [ $? = 0 ]; then
#  #this is softlink
#  _PWD=`pwd`
#  _EXEDIR=`dirname "$0"`
#  cd "$_EXEDIR"
#  _BASENAME=`basename "$0"`
#  _REALFILE=`ls -l "$_BASENAME" | sed 's/.*->\ //g'`
#   BASE_DIR=`dirname "$_REALFILE"`/..
#   BASE_DIR=`(cd "$BASE_DIR"; pwd)`
#   cd "$_PWD"
#fi

PID_DIR="${BASE_DIR}/pid"
PID_FILE="${PID_DIR}/app.pid"
if [ ! -d "${PID_DIR}" ]; then
	mkdir "${PID_DIR}"
fi

usage() {
	echo "Usage: [start|stop|restart|status|version]"
	exit 1
}

get_pid()
{
  if [ -f "${PID_FILE}" ] # 判断pid文件是否存在
  then
    if [ -r "$PID_FILE" ]  # 判断pid文件是否可读
    then
      pid=$(cat "${PID_FILE}") # 获取pid文件内容
      if [ "X$pid" != "X" ] # pid 文件有值
      then
        pid=$(ps -p "$pid" | grep "$pid" | grep -v grep | awk '{print $1}' | tail -1)
      fi
    else
      echo "Cannot read pidfile: $PID_FILE."
      exit 1
    fi
  fi
}

is_running()
{
  get_pid
  if [ "X$pid" != "X" ]
  then
    return 0
  else
    return 1
  fi
}

THIRD_PART_LIB_DIR=${BASE_DIR}/lib
CE_LIB_DIR=${BASE_DIR}/celib
LIB_DIR="${THIRD_PART_LIB_DIR},${CE_LIB_DIR}"

JAVA_OPTS="-server"
JAVA_OPTS="${JAVA_OPTS} -Xmx2g"
JAVA_OPTS="${JAVA_OPTS} -Xms2g"
JAVA_OPTS="${JAVA_OPTS} -Dname=${APP_NAME}"
JAVA_OPTS="${JAVA_OPTS} -XX:SurvivorRatio=8"
JAVA_OPTS="${JAVA_OPTS} -XX:MetaspaceSize=256m"
JAVA_OPTS="${JAVA_OPTS} -XX:MaxMetaspaceSize=512m"
JAVA_OPTS="${JAVA_OPTS} -XX:+DisableExplicitGC"
JAVA_OPTS="${JAVA_OPTS} -XX:+UseG1GC"
JAVA_OPTS="${JAVA_OPTS} -XX:G1HeapRegionSize=32m"
JAVA_OPTS="${JAVA_OPTS} -XX:G1ReservePercent=30"
# JAVA_OPTS="${JAVA_OPTS} -XX:MaxGCPauseMillis=250"
JAVA_OPTS="${JAVA_OPTS} -XX:SoftRefLRUPolicyMSPerMB=1000"
JAVA_OPTS="${JAVA_OPTS} -XX:StringTableSize=500000"
JAVA_OPTS="${JAVA_OPTS} --add-opens=java.base/java.lang=ALL-UNNAMED"
JAVA_OPTS="${JAVA_OPTS} -Dloader.path=${LIB_DIR}"
JAVA_OPTS="${JAVA_OPTS} -Dspring.profiles.active=prod"

#JAVA_OPTS="${JAVA_OPTS} -Dspring.profiles.active=${PROFILES}"
# TODO 远程调试的参数

detect_pid() {
	pid=$(ps -f | grep java | grep "$BOOT_JAR" | grep -v grep | awk '{print $2}')
}

start() {
	cd "${BASE_DIR}"
	if [ -z "${BOOT_JAR}" ];then
		echo 'detect boot jar'
		BOOT_JAR=$(cd "${BASE_DIR}";ls *.jar)
	fi
  	# TODO 完善提示语
	echo 'start'
	echo "JAVA_OPTS: ${JAVA_OPTS}"
	echo "BOOT_JAR: ${BOOT_JAR}"
	if ! is_running;
	then
#		if nohup /usr/local/jdk-21.0.1/bin/java ${JAVA_OPTS} -jar "${BOOT_JAR}" >/data/okx-market/app.log 2>&1 &
		if nohup /usr/local/jdk-21.0.1/bin/java  --enable-preview ${JAVA_OPTS} -jar "${BOOT_JAR}" >/data/okx-market/app.log 2>&1 &
		then
			detect_pid
			if [ "X${pid}" != "X" ]
			then
				echo "${pid}" > "${PID_FILE}"
				echo "Starting $APP_NAME ..." >&2
			else
				echo "$APP_NAME started FAILED1" >&2
			fi
		else
		  echo "$APP_NAME started FAILED2" >&2
		fi
  else
  	echo "$APP_NAME is already running..." >&2
  fi
}

stop() {
	if is_running;
	then
	  kill "$(cat ${PID_FILE})"
	  echo "Stopping $APP_NAME ... OK" >&2
	else
  	echo "$APP_NAME is not running..." >&2
  fi
  rm -f "${PID_FILE}"
}

restart() {
	stop
	# TODO 写个循环确保真的stop了再start？
	start
}

status() {
	if is_running
	then
		echo "$APP_NAME is running"
		# 返回 1
		return 1;
	else
		echo "$APP_NAME is not running"
		# 返回 0
		return 0;
	fi
}

version() {
	echo 'version todo'
}


case $1 in
	start)
		start
	;;
	stop)
		stop
	;;
	restart)
		restart
	;;
	status)
		status
	;;
	version)
		version
	;;
	*)
		usage
	;;
esac

